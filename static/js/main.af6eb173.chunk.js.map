{"version":3,"sources":["serviceWorker.js","components/WebSocketWrapper/WebSocketWrapper.js","components/WebSocketExample/WebSocketExample.js","components/NoMatch/NoMatch.js","components/Home/Home.js","components/ChartPage/ChartPage.js","components/App/App.js","index.js"],"names":["Boolean","window","location","hostname","match","WebSocketWrapper","props","state","ws","WebSocket","url","protocol","attempts","sendMessage","bind","setupWebsocket","logline","this","debug","console","log","k","reconnectIntervalInMilliSeconds","Math","min","pow","websocket","onopen","logging","onOpen","onmessage","evt","data","onMessage","shouldReconnect","reconnect","onclose","onClose","time","generateInterval","timeoutID","setTimeout","setState","onerror","readyState","clearTimeout","close","message","JSON","stringify","send","React","Component","defaultProps","WebSocketExample","handleData","handleOpen","handleClose","refWebSocket","SERVER_URL","className","onClick","ref","Websocket","NoMatch","Home","ChartPage","parse","network","processData","rows","Object","entries","key","value","push","createRow","setInterval","Grid","container","direction","style","padding","marginBottom","width","backgroundColor","iconName","iconURL","usagePercents","height","src","Container","createLegend","Button","variant","color","size","startIcon","App","CssBaseline","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af6eb173.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, {Fragment} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass WebSocketWrapper extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ws: new WebSocket(this.props.url, this.props.protocol),\r\n            attempts: 1\r\n        };\r\n        this.sendMessage = this.sendMessage.bind(this);\r\n        this.setupWebsocket = this.setupWebsocket.bind(this);\r\n    }\r\n\r\n    logging(logline) {\r\n        if (this.props.debug === true) {\r\n            console.log(logline);\r\n        }\r\n    }\r\n\r\n    generateInterval(k) {\r\n        if (this.props.reconnectIntervalInMilliSeconds > 0) {\r\n            return this.props.reconnectIntervalInMilliSeconds;\r\n        }\r\n        return Math.min(30, (Math.pow(2, k) - 1)) * 1000;\r\n    }\r\n\r\n    setupWebsocket() {\r\n        let websocket = this.state.ws;\r\n\r\n        websocket.onopen = () => {\r\n            this.logging('Websocket connected');\r\n            if (typeof this.props.onOpen === 'function') this.props.onOpen();\r\n        };\r\n\r\n        websocket.onmessage = (evt) => {\r\n            console.log(evt.data);\r\n            this.props.onMessage(evt.data);\r\n        };\r\n\r\n        this.shouldReconnect = this.props.reconnect;\r\n\r\n        websocket.onclose = () => {\r\n            this.logging('Websocket disconnected');\r\n            if (typeof this.props.onClose === 'function') this.props.onClose();\r\n            if (this.shouldReconnect) {\r\n                let time = this.generateInterval(this.state.attempts);\r\n                this.timeoutID = setTimeout(() => {\r\n                    this.setState({attempts: this.state.attempts + 1});\r\n                    this.setState({ws: new WebSocket(this.props.url, this.props.protocol)});\r\n                    this.setupWebsocket();\r\n                }, time);\r\n            }\r\n        };\r\n\r\n        websocket.onerror = (evt) => {\r\n            console.log(\"++++++++++++++++++\");\r\n            console.log(\"ERROR WS: \", websocket.readyState);\r\n            console.log(this.props.url);\r\n            console.log(\"++++++++++++++++++\");\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setupWebsocket();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.shouldReconnect = false;\r\n        clearTimeout(this.timeoutID);\r\n        let websocket = this.state.ws;\r\n        websocket.close();\r\n    }\r\n\r\n    sendMessage(message) {\r\n        let websocket = this.state.ws;\r\n        message = JSON.stringify(message);\r\n        websocket.send(message);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment/>\r\n        );\r\n    }\r\n}\r\n\r\nWebSocketWrapper.defaultProps = {\r\n    debug: false,\r\n    reconnect: true\r\n};\r\n\r\nWebSocketWrapper.propTypes = {\r\n    url: PropTypes.string.isRequired,\r\n    onMessage: PropTypes.func.isRequired,\r\n    onOpen: PropTypes.func,\r\n    onClose: PropTypes.func,\r\n    debug: PropTypes.bool,\r\n    reconnect: PropTypes.bool,\r\n    protocol: PropTypes.string,\r\n    reconnectIntervalInMilliSeconds: PropTypes.number\r\n};\r\n\r\nexport default WebSocketWrapper;\r\n","import React from 'react';\r\nimport './WebSocketExample.css';\r\nimport WebSocketWrapper from \"../WebSocketWrapper/WebSocketWrapper\";\r\n\r\n\r\nclass WebSocketExample extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.SERVER_URL = \"ws://localhost:43968/example_ws/echo-example\";\r\n    }\r\n\r\n    handleData = (data) => {\r\n        console.log(\"Data received\");\r\n        console.log(data);\r\n    };\r\n\r\n    handleOpen = () => {\r\n        console.log(\"Connected to Server\");\r\n    };\r\n\r\n    handleClose = () => {\r\n        console.log(\"Disconnected from Server\");\r\n    };\r\n\r\n    sendMessage = (message) => {\r\n        this.refWebSocket.sendMessage(message);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"WebSocketExample\">\r\n                <button onClick={() => this.sendMessage(\"Hello World!\")}>Send Message</button>\r\n                <WebSocketWrapper\r\n                    url={this.SERVER_URL} onMessage={this.handleData}\r\n                    onOpen={this.handleOpen} onClose={this.handleClose}\r\n                    reconnect={true} debug={true}\r\n                    ref={Websocket => {\r\n                        this.refWebSocket = Websocket;\r\n                    }}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WebSocketExample;","import React from 'react';\r\nimport './NoMatch.css';\r\n\r\nfunction NoMatch() {\r\n    return (\r\n        <div className=\"NoMatch\">\r\n            Sorry, this page doesn't exist. Click Here to Go Back Home.\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NoMatch;","import React, {Component} from 'react';\r\nimport './Home.css';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Home\">\r\n                HOME PAGE\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\r\nimport './ChartPage.css';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport WebSocketWrapper from \"../WebSocketWrapper/WebSocketWrapper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nclass ChartPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.SERVER_URL = \"ws://localhost:43968/example_ws/echo-example\";\r\n        this.state = {\r\n            data: {},\r\n            network: {},\r\n        }\r\n    }\r\n\r\n    handleData = (data) => {\r\n        console.log(\"Data received\");\r\n        data = JSON.parse(data);\r\n        console.log(data);\r\n        this.setState({data: data['ui'], network: data['network']});\r\n    };\r\n\r\n    processData = (data) => {\r\n        let rows = [];\r\n        for (let [key, value] of Object.entries(data)) {\r\n            rows.push(this.createRow(key, value[\"icon\"], [value[\"mouse_usage\"], value[\"keyboard_usage\"], value[\"idle\"], value[\"open\"]]));\r\n        }\r\n        return rows;\r\n    };\r\n\r\n    handleOpen = () => {\r\n        console.log(\"Connected to Server\");\r\n        this.sendMessage(\"Fetching UI Data\");\r\n        setInterval(() => {\r\n            this.sendMessage(\"Fetching UI Data\");\r\n        }, 300000);\r\n    };\r\n\r\n    handleClose = () => {\r\n        console.log(\"Disconnected from Server\");\r\n    };\r\n\r\n    sendMessage = (message) => {\r\n        this.refWebSocket.sendMessage(message);\r\n    };\r\n\r\n    createLegend() {\r\n        return (\r\n            <Grid container direction=\"row\" style={{padding: \"5px\", marginBottom: \"5px\"}}>\r\n                <div className=\"ChartPage-RowBegin\">\r\n                    <div className=\"ChartPage-ItemTitle\">Legend</div>\r\n                </div>\r\n                <div className=\"ChartPage-Row\">\r\n                    <div className=\"ChartPage-ItemPercentsParent\">\r\n                        <div className=\"ChartPage-ItemPercents\"\r\n                             style={{width: \"25%\", backgroundColor: \"#29B6F6\"}}>Mouse Usage In Min\r\n                        </div>\r\n                        <div className=\"ChartPage-ItemPercents\"\r\n                             style={{width: \"25%\", backgroundColor: \"#F9A825\"}}>Keyboard Usage In Min\r\n                        </div>\r\n                        <div className=\"ChartPage-ItemPercents\"\r\n                             style={{width: \"25%\", backgroundColor: \"#4CAF50\"}}>Idle Time In Min\r\n                        </div>\r\n                        <div className=\"ChartPage-ItemPercents\"\r\n                             style={{width: \"25%\", backgroundColor: \"#f44336\"}}>Open Time In Min\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    createRow(iconName, iconURL, usagePercents) {\r\n        return (\r\n            <Grid container direction=\"row\" style={{padding: \"5px\"}} key={iconName}>\r\n                <div className=\"ChartPage-RowBegin\">\r\n                    <img style={{width: \"50px\", height: \"50px\"}}\r\n                         src={\"static/icons/\" + iconURL}/>\r\n                    <div className=\"ChartPage-ItemTitle\">{iconName}</div>\r\n                </div>\r\n                <div className=\"ChartPage-Row\">\r\n                    <div className=\"ChartPage-ItemPercentsParent\">\r\n                        <div className=\"ChartPage-ItemPercents\"\r\n                             style={{width:  \"25%\", backgroundColor: \"#29B6F6\"}}>{usagePercents[0]}\r\n                        </div>\r\n                        <div className=\"ChartPage-ItemPercents\"\r\n                             style={{width: \"25%\", backgroundColor: \"#F9A825\"}}>{usagePercents[1]}\r\n                        </div>\r\n                        <div className=\"ChartPage-ItemPercents\"\r\n                             style={{width:  \"25%\", backgroundColor: \"#4CAF50\"}}>{usagePercents[2]}\r\n                        </div>\r\n                        <div className=\"ChartPage-ItemPercents\"\r\n                             style={{width: \"25%\", backgroundColor: \"#f44336\"}}>{usagePercents[3]}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Grid>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        // {\r\n        // “Chrome” : {“mouse_usage”: 40, “keyboard_usage”: 30, “idle”: 10, “thinking”: 20},\r\n        // “Visual Studio” : {“mouse_usage”: 20, “keyboard_usage”: 50, “idle”: 10, “thinking”: 20}\r\n        // }\r\n        return (\r\n            <Container className=\"ChartPage\">\r\n                {this.createLegend()}\r\n                <div className=\"ChartPage-Scroll\">\r\n                    {this.processData(this.state.data)}\r\n                    {/*{this.createRow(\"Google Chrome\", \"https://icons.iconarchive.com/icons/google/chrome/256/Google-Chrome-icon.png\", [40, 30, 10, 20])}*/}\r\n                    {/*{this.createRow(\"Visual Studio\", \"https://cdn.iconscout.com/icon/free/png-256/visual-studio-569577.png\", [20, 50, 10, 20])}*/}\r\n                    {/*{this.createRow(\"PyCharm\", \"https://dashboard.snapcraft.io/site_media/appmedia/2017/12/PyCharmEdu256.png\", [30, 40, 20, 10])}*/}\r\n                    {/*{this.createRow(\"Google Chrome\", \"https://icons.iconarchive.com/icons/google/chrome/256/Google-Chrome-icon.png\", [40, 30, 10, 20])}*/}\r\n                    {/*{this.createRow(\"Visual Studio\", \"https://cdn.iconscout.com/icon/free/png-256/visual-studio-569577.png\", [20, 50, 10, 20])}*/}\r\n                    {/*{this.createRow(\"PyCharm\", \"https://dashboard.snapcraft.io/site_media/appmedia/2017/12/PyCharmEdu256.png\", [30, 40, 20, 10])}*/}\r\n                    {/*{this.createRow(\"Google Chrome\", \"https://icons.iconarchive.com/icons/google/chrome/256/Google-Chrome-icon.png\", [40, 30, 10, 20])}*/}\r\n                    {/*{this.createRow(\"Visual Studio\", \"https://cdn.iconscout.com/icon/free/png-256/visual-studio-569577.png\", [20, 50, 10, 20])}*/}\r\n                    {/*{this.createRow(\"PyCharm\", \"https://dashboard.snapcraft.io/site_media/appmedia/2017/12/PyCharmEdu256.png\", [30, 40, 20, 10])}*/}\r\n                </div>\r\n                <Grid container direction=\"row\">\r\n                <div className=\"ChartPage-UserDetails\">\r\n                    <div className=\"ChartPage-UserDetails-Title\">\r\n                        User Details:\r\n                    </div>\r\n                    <div className=\"ChartPage-UserDetails-Text\">\r\n                        Username: {this.state.network['username']}\r\n                    </div>\r\n                    <div className=\"ChartPage-UserDetails-Text\">\r\n                        Home Directory: {this.state.network['homedir']}\r\n                    </div>\r\n                    <div className=\"ChartPage-UserDetails-Text\">\r\n                        Wifi SSID: {this.state.network['wifi_info']}\r\n                    </div>\r\n                    <div className=\"ChartPage-UserDetails-Text\">\r\n                        Hostname: {this.state.network['hostname']}\r\n                    </div>\r\n                    <div className=\"ChartPage-UserDetails-Text\">\r\n                        IP Address: {this.state.network['ip_address']}\r\n                    </div>\r\n                    <div className=\"ChartPage-UserDetails-Text\">\r\n                        Mac Address: {this.state.network['mac_address']}\r\n                    </div>\r\n                </div>\r\n                <div className=\"GenerateDiagram\">\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"large\"\r\n                        className=\"\"\r\n                        startIcon={<SaveIcon />}\r\n                        onClick={() => this.sendMessage(\"GenerateDiagram\")}\r\n                    >\r\n                        Generate Business Process Flow\r\n                    </Button>\r\n                </div>\r\n                </Grid>\r\n                <WebSocketWrapper\r\n                    url={this.SERVER_URL} onMessage={this.handleData}\r\n                    onOpen={this.handleOpen} onClose={this.handleClose}\r\n                    reconnect={true} debug={true}\r\n                    ref={Websocket => {\r\n                        this.refWebSocket = Websocket;\r\n                    }}/>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChartPage;","import React, {Fragment} from 'react';\r\nimport './App.css';\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport WebSocketExample from \"../WebSocketExample/WebSocketExample\";\r\nimport NoMatch from \"../NoMatch/NoMatch\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Home from \"../Home/Home\";\r\nimport ChartPage from \"../ChartPage/ChartPage\";\r\n\r\nfunction App() {\r\n    return (\r\n        <Fragment>\r\n            <CssBaseline/>\r\n            <div className=\"App\">\r\n                {/*<NavBar/>*/}\r\n                <Switch>\r\n                    <Route exact path=\"/\" component={ChartPage}/>\r\n                    <Route exact path=\"/home\" component={Home}/>\r\n                    <Route exact path=\"/example\" component={WebSocketExample}/>\r\n                    <Route component={NoMatch}/>\r\n                </Switch>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./components/App/App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(<BrowserRouter><App/></BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}